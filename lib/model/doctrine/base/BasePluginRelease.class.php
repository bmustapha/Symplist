<?php

/**
 * BasePluginRelease
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $plugin_id
 * @property string $version
 * @property timestamp $date
 * @property clob $summary
 * @property enum $stability
 * @property clob $readme
 * @property SymfonyPlugin $Plugin
 * @property Doctrine_Collection $ApiVersions
 * @property Doctrine_Collection $Dependencies
 * @property Doctrine_Collection $PluginReleaseSymfonyApiVersion
 * 
 * @method integer             getPluginId()                       Returns the current record's "plugin_id" value
 * @method string              getVersion()                        Returns the current record's "version" value
 * @method timestamp           getDate()                           Returns the current record's "date" value
 * @method clob                getSummary()                        Returns the current record's "summary" value
 * @method enum                getStability()                      Returns the current record's "stability" value
 * @method clob                getReadme()                         Returns the current record's "readme" value
 * @method SymfonyPlugin       getPlugin()                         Returns the current record's "Plugin" value
 * @method Doctrine_Collection getApiVersions()                    Returns the current record's "ApiVersions" collection
 * @method Doctrine_Collection getDependencies()                   Returns the current record's "Dependencies" collection
 * @method Doctrine_Collection getPluginReleaseSymfonyApiVersion() Returns the current record's "PluginReleaseSymfonyApiVersion" collection
 * @method PluginRelease       setPluginId()                       Sets the current record's "plugin_id" value
 * @method PluginRelease       setVersion()                        Sets the current record's "version" value
 * @method PluginRelease       setDate()                           Sets the current record's "date" value
 * @method PluginRelease       setSummary()                        Sets the current record's "summary" value
 * @method PluginRelease       setStability()                      Sets the current record's "stability" value
 * @method PluginRelease       setReadme()                         Sets the current record's "readme" value
 * @method PluginRelease       setPlugin()                         Sets the current record's "Plugin" value
 * @method PluginRelease       setApiVersions()                    Sets the current record's "ApiVersions" collection
 * @method PluginRelease       setDependencies()                   Sets the current record's "Dependencies" collection
 * @method PluginRelease       setPluginReleaseSymfonyApiVersion() Sets the current record's "PluginReleaseSymfonyApiVersion" collection
 * 
 * @package    plugintracker
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePluginRelease extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('plugin_release');
        $this->hasColumn('plugin_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('version', 'string', 10, array(
             'type' => 'string',
             'length' => 10,
             ));
        $this->hasColumn('date', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('summary', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('stability', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'alpha',
              1 => 'beta',
              2 => 'stable',
             ),
             ));
        $this->hasColumn('readme', 'clob', null, array(
             'type' => 'clob',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('SymfonyPlugin as Plugin', array(
             'local' => 'plugin_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('SymfonyApiVersion as ApiVersions', array(
             'refClass' => 'PluginReleaseSymfonyApiVersion',
             'local' => 'release_id',
             'foreign' => 'api_version_id'));

        $this->hasMany('PluginReleaseDependency as Dependencies', array(
             'local' => 'id',
             'foreign' => 'release_id'));

        $this->hasMany('PluginReleaseSymfonyApiVersion', array(
             'local' => 'id',
             'foreign' => 'release_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $sortable0 = new Doctrine_Template_Sortable(array(
             'uniqueBy' => 
             array(
              0 => 'plugin_id',
             ),
             ));
        $this->actAs($timestampable0);
        $this->actAs($sortable0);
    }
}