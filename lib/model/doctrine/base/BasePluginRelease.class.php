<?php

/**
 * BasePluginRelease
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $plugin_id
 * @property string $version
 * @property timestamp $date
 * @property decimal $symfony_version_min
 * @property decimal $symfony_version_max
 * @property clob $summary
 * @property string $stability
 * @property clob $readme
 * @property string $dependencies
 * @property SymfonyPlugin $Plugin
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6365 2009-09-15 18:22:38Z jwage $
 */
abstract class BasePluginRelease extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('plugin_release');
        $this->hasColumn('plugin_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('version', 'string', 10, array(
             'type' => 'string',
             'length' => '10',
             ));
        $this->hasColumn('date', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('symfony_version_min', 'decimal', 5, array(
             'type' => 'decimal',
             'length' => '5',
             'scale' => '1',
             ));
        $this->hasColumn('symfony_version_max', 'decimal', 5, array(
             'type' => 'decimal',
             'length' => '5',
             'scale' => '1',
             ));
        $this->hasColumn('summary', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('stability', 'string', 30, array(
             'type' => 'string',
             'length' => '30',
             ));
        $this->hasColumn('readme', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('dependencies', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
    }

    public function setUp()
    {
        parent::setUp();
    $this->hasOne('SymfonyPlugin as Plugin', array(
             'local' => 'plugin_id',
             'foreign' => 'id'));
    }
}