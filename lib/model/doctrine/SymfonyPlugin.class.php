<?php

/**
 * SymfonyPlugin
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 5925 2009-06-22 21:27:17Z jwage $
 */
class SymfonyPlugin extends BaseSymfonyPlugin
{
  protected $_rating, $_num_votes;
  
  public function isRegistered()
  {
    return $this['Authors']->count();
  }
  
  public function getRoute()
  {
    return '@plugin?title='.$this['title'];
  }
  
  public function addRating($rating, $user = null)
  {
    if ((int)$rating > 5 || (int)$rating < 1) 
    {
      throw new sfException("Rating must be between 1 and 5.  Rating $rating is invalid");
    }
    $plugin_rating = new PluginRating();
    $plugin_rating['Plugin'] = $this;
    $plugin_rating['rating'] = (int)$rating;
    if ($user && $user->isAuthenticated()) 
    {
      $plugin_rating['User'] = $user->getGuardUser();
    }
    $plugin_rating->save();
    $this->clearRatingInfo();
  }
  
  public function getApiVersions()
  {
    $versions = Doctrine_Collection::create('SymfonyApiVersion');
    $versions->setKeyColumn('id');
    
    foreach ($this['Releases'] as $release)
    {
      $versions->merge($release->getApiVersions());
    }
    
    return $versions;
  }
    
  public function getRating()
  {
    if ($this->_rating == null)
    {
      $this->setRatingInfo();
    }
    return $this->_rating;
  }
  
  public function getNumVotes()
  {
    if ($this->_num_votes == null)
    {
      $this->setRatingInfo();
    }
    return $this->_num_votes;
  }
  
  public function setRatingInfo()
  {
    $info = $this->getRatingInfo();
    $rating = (round($info['average']*2, 0)/2);
    $rating = floor($rating); // for the time being, round up, until we can get split stars
    $this->_rating = $rating;
    $this->_num_votes = $info['num_votes'];
  }
  
  public function clearRatingInfo()
  {
    $this->_rating = null;
    $this->_num_votes = null;
  }

  /**
   * Used for lucene plugin indexing
   *
   * @return void
   * @author Brent Shaffer
   */
  
  public function getIndexableTitle()
  {
    // Translate camel-cased word to lowercased and spaced
    $index = csInflector::indexize($this['title']);
    
    // remove plugin prefix
    // $index = substr($index, strpos($index, ' '));
    
    // remove ending "plugin"
    $index = substr($index, 0, (strlen($index)-6));
    
    // trim
    $index = trim($index);
    
    return $index;
  }
    
  public function getSummary()
  {
    return SeoInflector::summarize($this->getDescription());
  }

  public function getRatingInfo()
  {
    $q = Doctrine::getTable('PluginRating')
              ->createQuery('r')
              ->select('AVG(r.rating) as average, COUNT(r.rating) as num_votes')
              ->where('r.symfony_plugin_id = ?', $this['id']);
  
    $result = $q->fetchOne();
  
    return $result;
  }
  
  public function hasRelease($release)
  {
    foreach ($this['Releases'] as $rel) 
    {
      if ($rel['version'] == $release) 
      {
        return true;
      }
    }
    return false;
  }
  
  public function getRelease($release = null)
  {
    if ($release === null && $i = $this['Releases']->count()) 
    {
      return $this['Releases'][$i-1];  // Return most recent release
    }
    
    foreach ($this['Releases'] as $rel) 
    {
      if ($rel['version'] == $release) 
      {
        return $rel;
      }
    }
    
    return null;
  }
  
  public function getStability($release = null)
  {
    if ($release = $this->getRelease($release)) 
    {
      return $release['stability'];
    }
  }
    
  public function isPublished()
  {
    return $this['Releases']->count() > 0;
  }
  
  public function getSymfonyPluginHomepage()
  {
    return 'http://www.symfony-project.org/plugins/'.$this['title'];
  }
  
  public function getSymfonyRepository()
  {
    return 'http://svn.symfony-project.com/plugins/'.$this['title'];
  }
  
  public function preSave($event)
  {
    if (!$this['repository']) 
    {
      $this['repository'] = $this->getSymfonyRepository();
    }
    if (!$this['homepage']) 
    {
      $this['homepage'] = $this->getSymfonyPluginHomepage();
    }
  }
}